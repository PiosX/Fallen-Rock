function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,i){for(var e=0;e<i.length;e++){var n=i[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,_toPropertyKey(n.key),n)}}function _createClass(t,i,e){return i&&_defineProperties(t.prototype,i),e&&_defineProperties(t,e),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(t,i){if("object"!==_typeof(t)||null===t)return t;var e=t[Symbol.toPrimitive];if(void 0===e)return("string"===i?String:Number)(t);e=e.call(t,i||"default");if("object"!==_typeof(e))return e;throw new TypeError("@@toPrimitive must return a primitive value.")}var UIBlock=function(){function t(){_classCallCheck(this,t),this._x=0,this._y=0,this._oldX=0,this._oldY=0,this._visible=!0,this._displayWidth=0,this._displayHeight=0,this.children=[],this.childIndex=-1,this.isPosBlock=!0,this._depth=1,this._alpha=1}return _createClass(t,[{key:"depth",get:function(){return this._depth},set:function(t){this._depth=t,0<this.children.length&&this.setChildDepth(this.children[0])}},{key:"setChildDepth",value:function(t){var i=100*this._depth+t.childIndex;console.log(i),null==t.scene&&(t.scene=gw.model.currentScene),t.depth=i,null!=t.nextChild&&this.setChildDepth(t.nextChild)}},{key:"x",get:function(){return this._x},set:function(t){this._oldX=this._x,this._x=t,this.updatePositions()}},{key:"y",get:function(){return this._y},set:function(t){this._oldY=this._y,this._y=t,this.updatePositions()}},{key:"add",value:function(t){this.childIndex++,t.childIndex=this.childIndex,this.children.push(t),this.buildList()}},{key:"removeChild",value:function(t){this.children.splice(t.childIndex,1),this.buildList();for(var i=this.children.length,e=0;e<i;e++)this.children[e].childIndex=e;this.childIndex=i}},{key:"buildList",value:function(){var t=this.children.length;if(1<t)for(var i=1;i<t;i++)this.children[i-1].nextChild=this.children[i];this.children[t-1].nextChild=null}},{key:"willRender",value:function(){}},{key:"displayWidth",get:function(){return this._displayWidth}},{key:"displayHeight",get:function(){return this._displayHeight}},{key:"setSize",value:function(t,i){this._displayWidth=t,this._displayHeight=i}},{key:"setXY",value:function(t,i){this.x=t,this.y=i,this.updatePositions()}},{key:"visible",get:function(){return this._visible},set:function(t){this._visible!=t&&(this._visible=t,0<this.children.length)&&this.updateChildVisible(this.children[0],t)}},{key:"alpha",get:function(){return this._alpha},set:function(t){this._alpha!=t&&(this._alpha=t,0<this.children.length)&&this.updateChildAlpha(this.children[0],t)}},{key:"setScrollFactor",value:function(t){0<this.children.length&&this.updateChildScroll(this.children[0],t)}},{key:"updateChildScroll",value:function(t,i){t.setScrollFactor(i),t.nextChild&&t.nextChild.setScrollFactor(i)}},{key:"updateChildAlpha",value:function(t,i){t.alpha=i,1==t.isPosBlock&&(t.alpha=i),null!=t.nextChild&&this.updateChildAlpha(t.nextChild,i)}},{key:"updateChildVisible",value:function(t,i){t.visible=i,1==t.isPosBlock&&(t.visible=i),null!=t.nextChild&&this.updateChildVisible(t.nextChild,i)}},{key:"updateChildPos",value:function(t){t.y=t.y-this._oldY+this._y,t.x=t.x-this._oldX+this._x,1==t.isPosBlock&&t.updatePositions(),null!=t.nextChild&&this.updateChildPos(t.nextChild),this._oldX=this._x,this._oldY=this._y}},{key:"updatePositions",value:function(){this.children&&0<this.children.length&&this.updateChildPos(this.children[0])}},{key:"getRelPos",value:function(t){return{x:t.x-this.x,y:t.y-this.y}}},{key:"once",value:function(t,i,e){}},{key:"getChildren",value:function(t,i){t.push(i),i.isPosBlock&&0<i.children.length&&i.getChildren(t,i.children[0]),i.nextChild&&this.getChildren(t,i.nextChild)}},{key:"getAllChildren",value:function(){var t=[];return 0<this.children.length&&this.getChildren(t,this.children[0]),t}},{key:"getChildAt",value:function(t){return this.children[t]}},{key:"setMask",value:function(i){this.getAllChildren().forEach(function(t){t.setMask(i)}.bind(this))}},{key:"destroy",value:function(){for(var t=this.getAllChildren(),i=(this.childIndex=-1,t.length),e=0;e<i;e++)t[e].destroy();this.children.length=0,t.length=0}}]),t}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
